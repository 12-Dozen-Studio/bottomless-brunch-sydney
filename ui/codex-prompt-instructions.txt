## Codex Prompt Instructions for Bottomless Brunch Webapp

You are generating a static frontend webapp to be hosted on GitHub Pages.
The stack is:
- Vanilla JavaScript (no frameworks, no build tools)
- Tailwind CSS via CDN
- Data stored in brunch_venue.json (schema-compliant)

---

### ðŸ”§ Key Instructions

- Load venue data from `assets/brunch_venue.json`
- Dynamically render all venues into the container `#venueList`
- Do not hardcode venue HTML
- Use modular JS functions: e.g., `renderVenueCard()`, `renderFilters()`, `renderModal()`
- Match layout and style to the provided prototypes (see below)

---

### ðŸŽ¨ Layout Prototypes (Style/Structure Reference Only)

<!-- PROTOTYPE: Venue Card -->
<div class="bg-white rounded-lg overflow-hidden border border-gray-200 flex cursor-pointer">
  <div class="w-1/3">
    <img class="w-full h-full object-cover" src="https://example.com/image.jpg" alt="Restaurant image">
  </div>
  <div class="w-2/3 p-3 flex flex-col justify-between">
    <div class="flex justify-between items-start">
      <div>
        <h2 class="text-base font-bold text-gray-900">Restaurant Name</h2>
        <div class="flex items-center text-xs text-gray-600 mt-1">
          <span class="material-icons text-xs mr-1">location_on</span>
          <span>Suburb</span>
          <span class="mx-1">â€¢</span>
          <span>Cuisine</span>
        </div>
      </div>
      <button class="text-gray-400 hover:text-red-500">
        <span class="material-icons text-xl">favorite_border</span>
      </button>
    </div>
    <div class="mt-2 space-y-1">
      <!-- See package row prototype below -->
    </div>
  </div>
</div>

<!-- PROTOTYPE: Package Row -->
<div class="flex items-center justify-between text-xs">
  <div class="font-medium text-gray-700">Package Name</div>
  <div class="text-right">
    <p class="font-bold text-gray-800">$Price pp</p>
    <p class="text-xs text-gray-500">Day Range</p>
  </div>
</div>

<!-- PROTOTYPE: Cuisine Filter Pill -->
<div class="flex flex-col items-center space-y-2 flex-shrink-0">
  <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center">
    <img class="w-8 h-8" src="https://example.com/icon.png" alt="Cuisine Icon">
  </div>
  <span class="text-xs text-gray-700 text-center">Cuisine Name</span>
</div>

<!-- PROTOTYPE: Bottom Navigation -->
<nav class="bg-white border-t border-gray-200 p-2 fixed bottom-0 w-full max-w-md mx-auto flex justify-around">
  <a class="flex flex-col items-center text-[var(--primary-color)]" href="#">
    <span class="material-icons">home</span>
    <span class="text-xs font-medium">Home</span>
  </a>
  <a class="flex flex-col items-center text-gray-500 hover:text-[var(--primary-color)]" href="#">
    <span class="material-icons">map</span>
    <span class="text-xs">Map</span>
  </a>
  <a class="flex flex-col items-center text-gray-500 hover:text-[var(--primary-color)]" href="#">
    <span class="material-icons">favorite_border</span>
    <span class="text-xs">Favourites</span>
  </a>
</nav>

---

### ðŸªŸ Modal Interaction (Slide-Up on Card Click)

When a user **clicks on a venue card**, open a **slide-up modal** from the bottom of the screen. The modal should:

#### Layout & Behavior
- Cover max **Â¾ of the screen height**
- Appear above a semi-transparent dark backdrop (`rgba(0,0,0,0.3)`)
- Be dismissible via **close button** or backdrop click

#### Modal Content (Driven by venue data)
1. **Venue Name** (header)
2. **Image Carousel/Grid**
   - Use venue `imageUrl[]` if available
   - If missing, show 3 fallback placeholders:
     - `images/placeholder-brunch.jpg`
     - `images/placeholder-crowd.jpg`
     - `images/placeholder-drinks.jpg`
3. **Suburb & Cuisine**
4. **Map or Address Section**
5. **Packages List** (from `packages[]`):
   - `packageName`
   - `availableDays`
   - `sessionStartTime`
   - `durationMinutes`
   - `pricePerPerson`
   - `description`
6. **Link Buttons**
   - `officialWebsite`, `instagramUrl`, `googleMapsUrl`
7. **Favorite Toggle Button** (sync state with list view)

Design should match the look and feel of the static HTML prototype, using Tailwind utilities.

---

You may now generate `script.js` to implement all rendering and interactions based on the above.
